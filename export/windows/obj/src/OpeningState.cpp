// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_OpeningState
#include <OpeningState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_PixelPerfectScaleMode
#include <flixel/system/scaleModes/PixelPerfectScaleMode.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_34142f3ba2c526b0_13_new,"OpeningState","new",0xda73812b,"OpeningState.new","OpeningState.hx",13,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_36_create,"OpeningState","create",0x5b0c0711,"OpeningState.create","OpeningState.hx",36,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_100_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",100,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_134_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",134,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_155_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",155,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_162_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",162,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_148_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",148,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_141_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",141,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_128_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",128,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_127_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",127,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_123_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",123,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_194_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",194,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_190_update,"OpeningState","update",0x6602261e,"OpeningState.update","OpeningState.hx",190,0x7e1c0ca5)
HX_LOCAL_STACK_FRAME(_hx_pos_34142f3ba2c526b0_234_SwitchScene,"OpeningState","SwitchScene",0x1f41f663,"OpeningState.SwitchScene","OpeningState.hx",234,0x7e1c0ca5)

void OpeningState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_34142f3ba2c526b0_13_new)
HXLINE(  32)		this->playingOpening = false;
HXLINE(  31)		this->frameTimer = ((Float)0);
HXLINE(  30)		this->currentFrame = 0;
HXLINE(  28)		this->openingFinished = false;
HXLINE(  27)		this->startClicked = false;
HXLINE(  26)		this->baseScale = ((Float)0.5);
HXLINE(  25)		this->showingAltCredits = false;
HXLINE(  23)		this->showingAltNG = false;
HXLINE(  13)		super::__construct();
            	}

Dynamic OpeningState_obj::__CreateEmpty() { return new OpeningState_obj; }

void *OpeningState_obj::_hx_vtable = 0;

Dynamic OpeningState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OpeningState_obj > _hx_result = new OpeningState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OpeningState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x13d93141) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x13d93141;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void OpeningState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_36_create)
HXLINE(  37)		this->super::create();
HXLINE(  38)		::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
HXLINE(  39)		::flixel::FlxG_obj::set_scaleMode( ::flixel::_hx_system::scaleModes::PixelPerfectScaleMode_obj::__alloc( HX_CTX ));
HXLINE(  42)		this->clickToStartImage =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  43)		this->clickToStartImage->loadGraphic(HX_("assets/images/clickToStartImage.png",0c,4f,7b,78),false,16,16,null(),null());
HXLINE(  44)		{
HXLINE(  44)			 ::flixel::math::FlxBasePoint this1 = this->clickToStartImage->origin;
HXDLIN(  44)			Float x = (this->clickToStartImage->get_width() / ( (Float)(2) ));
HXDLIN(  44)			Float y = (this->clickToStartImage->get_height() / ( (Float)(2) ));
HXDLIN(  44)			this1->set_x(x);
HXDLIN(  44)			this1->set_y(y);
            		}
HXLINE(  45)		{
HXLINE(  45)			 ::flixel::math::FlxBasePoint this2 = this->clickToStartImage->scale;
HXDLIN(  45)			Float y1 = this->baseScale;
HXDLIN(  45)			this2->set_x(this->baseScale);
HXDLIN(  45)			this2->set_y(y1);
            		}
HXLINE(  46)		this->clickToStartImage->set_alpha(((Float)0.5));
HXLINE(  47)		{
HXLINE(  47)			 ::flixel::FlxSprite _this = this->clickToStartImage;
HXDLIN(  47)			int axes = 17;
HXDLIN(  47)			bool _hx_tmp;
HXDLIN(  47)			if ((axes != 1)) {
HXLINE(  47)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp = true;
            			}
HXDLIN(  47)			if (_hx_tmp) {
HXLINE(  47)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  47)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  47)			bool _hx_tmp2;
HXDLIN(  47)			if ((axes != 16)) {
HXLINE(  47)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp2 = true;
            			}
HXDLIN(  47)			if (_hx_tmp2) {
HXLINE(  47)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  47)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  48)		this->add(this->clickToStartImage);
HXLINE(  51)		this->openingMovie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  52)		this->openingMovie->loadGraphic(HX_("assets/images/openingMovie/opening0001.png",28,2d,b5,ae),false,null(),null(),null(),null());
HXLINE(  53)		{
HXLINE(  53)			 ::flixel::math::FlxBasePoint this3 = this->openingMovie->scale;
HXDLIN(  53)			this3->set_x(((Float)0.72));
HXDLIN(  53)			this3->set_y(((Float)0.72));
            		}
HXLINE(  54)		{
HXLINE(  54)			 ::flixel::math::FlxBasePoint this4 = this->openingMovie->origin;
HXDLIN(  54)			Float x1 = (this->openingMovie->get_width() / ( (Float)(2) ));
HXDLIN(  54)			Float y2 = (this->openingMovie->get_height() / ( (Float)(2) ));
HXDLIN(  54)			this4->set_x(x1);
HXDLIN(  54)			this4->set_y(y2);
            		}
HXLINE(  55)		{
HXLINE(  55)			 ::flixel::FlxSprite _this1 = this->openingMovie;
HXDLIN(  55)			int axes1 = 17;
HXDLIN(  55)			bool _hx_tmp4;
HXDLIN(  55)			if ((axes1 != 1)) {
HXLINE(  55)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE(  55)				_hx_tmp4 = true;
            			}
HXDLIN(  55)			if (_hx_tmp4) {
HXLINE(  55)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(  55)				_this1->set_x(((( (Float)(_hx_tmp5) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  55)			bool _hx_tmp6;
HXDLIN(  55)			if ((axes1 != 16)) {
HXLINE(  55)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(  55)				_hx_tmp6 = true;
            			}
HXDLIN(  55)			if (_hx_tmp6) {
HXLINE(  55)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(  55)				_this1->set_y(((( (Float)(_hx_tmp7) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  56)		this->openingMovie->set_visible(false);
HXLINE(  57)		this->add(this->openingMovie);
HXLINE(  59)		this->createdForNewgrounds =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  60)		this->createdForNewgrounds->loadGraphic(HX_("assets/images/createdForNewgrounds.png",73,51,3a,ab),false,null(),null(),null(),null());
HXLINE(  61)		{
HXLINE(  61)			 ::flixel::math::FlxBasePoint this5 = this->createdForNewgrounds->scale;
HXDLIN(  61)			this5->set_x(((Float)0.72));
HXDLIN(  61)			this5->set_y(((Float)0.72));
            		}
HXLINE(  62)		{
HXLINE(  62)			 ::flixel::math::FlxBasePoint this6 = this->createdForNewgrounds->origin;
HXDLIN(  62)			Float x2 = (this->createdForNewgrounds->get_width() / ( (Float)(2) ));
HXDLIN(  62)			Float y3 = (this->createdForNewgrounds->get_height() / ( (Float)(2) ));
HXDLIN(  62)			this6->set_x(x2);
HXDLIN(  62)			this6->set_y(y3);
            		}
HXLINE(  63)		{
HXLINE(  63)			 ::flixel::FlxSprite _this2 = this->createdForNewgrounds;
HXDLIN(  63)			int axes2 = 17;
HXDLIN(  63)			bool _hx_tmp8;
HXDLIN(  63)			if ((axes2 != 1)) {
HXLINE(  63)				_hx_tmp8 = (axes2 == 17);
            			}
            			else {
HXLINE(  63)				_hx_tmp8 = true;
            			}
HXDLIN(  63)			if (_hx_tmp8) {
HXLINE(  63)				int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN(  63)				_this2->set_x(((( (Float)(_hx_tmp9) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  63)			bool _hx_tmp10;
HXDLIN(  63)			if ((axes2 != 16)) {
HXLINE(  63)				_hx_tmp10 = (axes2 == 17);
            			}
            			else {
HXLINE(  63)				_hx_tmp10 = true;
            			}
HXDLIN(  63)			if (_hx_tmp10) {
HXLINE(  63)				int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN(  63)				_this2->set_y(((( (Float)(_hx_tmp11) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  64)		this->createdForNewgrounds->set_visible(false);
HXLINE(  65)		this->add(this->createdForNewgrounds);
HXLINE(  66)		this->createdForNewgrounds2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  67)		this->createdForNewgrounds2->loadGraphic(HX_("assets/images/createdForNewgrounds2.png",35,bb,c8,49),false,null(),null(),null(),null());
HXLINE(  68)		{
HXLINE(  68)			 ::flixel::math::FlxBasePoint this7 = this->createdForNewgrounds2->scale;
HXDLIN(  68)			this7->set_x(((Float)0.72));
HXDLIN(  68)			this7->set_y(((Float)0.72));
            		}
HXLINE(  69)		{
HXLINE(  69)			 ::flixel::math::FlxBasePoint this8 = this->createdForNewgrounds2->origin;
HXDLIN(  69)			Float x3 = (this->createdForNewgrounds2->get_width() / ( (Float)(2) ));
HXDLIN(  69)			Float y4 = (this->createdForNewgrounds2->get_height() / ( (Float)(2) ));
HXDLIN(  69)			this8->set_x(x3);
HXDLIN(  69)			this8->set_y(y4);
            		}
HXLINE(  70)		{
HXLINE(  70)			 ::flixel::FlxSprite _this3 = this->createdForNewgrounds2;
HXDLIN(  70)			int axes3 = 17;
HXDLIN(  70)			bool _hx_tmp12;
HXDLIN(  70)			if ((axes3 != 1)) {
HXLINE(  70)				_hx_tmp12 = (axes3 == 17);
            			}
            			else {
HXLINE(  70)				_hx_tmp12 = true;
            			}
HXDLIN(  70)			if (_hx_tmp12) {
HXLINE(  70)				int _hx_tmp13 = ::flixel::FlxG_obj::width;
HXDLIN(  70)				_this3->set_x(((( (Float)(_hx_tmp13) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  70)			bool _hx_tmp14;
HXDLIN(  70)			if ((axes3 != 16)) {
HXLINE(  70)				_hx_tmp14 = (axes3 == 17);
            			}
            			else {
HXLINE(  70)				_hx_tmp14 = true;
            			}
HXDLIN(  70)			if (_hx_tmp14) {
HXLINE(  70)				int _hx_tmp15 = ::flixel::FlxG_obj::height;
HXDLIN(  70)				_this3->set_y(((( (Float)(_hx_tmp15) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  71)		this->createdForNewgrounds2->set_visible(false);
HXLINE(  72)		this->add(this->createdForNewgrounds2);
HXLINE(  74)		this->barryIsBreakdancing =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  75)		this->barryIsBreakdancing->loadGraphic(HX_("assets/images/barryIsBreakdancing.png",c5,36,91,df),false,null(),null(),null(),null());
HXLINE(  76)		{
HXLINE(  76)			 ::flixel::math::FlxBasePoint this9 = this->barryIsBreakdancing->scale;
HXDLIN(  76)			this9->set_x(((Float)0.72));
HXDLIN(  76)			this9->set_y(((Float)0.72));
            		}
HXLINE(  77)		{
HXLINE(  77)			 ::flixel::math::FlxBasePoint this10 = this->barryIsBreakdancing->origin;
HXDLIN(  77)			Float x4 = (this->barryIsBreakdancing->get_width() / ( (Float)(2) ));
HXDLIN(  77)			Float y5 = (this->barryIsBreakdancing->get_height() / ( (Float)(2) ));
HXDLIN(  77)			this10->set_x(x4);
HXDLIN(  77)			this10->set_y(y5);
            		}
HXLINE(  78)		{
HXLINE(  78)			 ::flixel::FlxSprite _this4 = this->barryIsBreakdancing;
HXDLIN(  78)			int axes4 = 17;
HXDLIN(  78)			bool _hx_tmp16;
HXDLIN(  78)			if ((axes4 != 1)) {
HXLINE(  78)				_hx_tmp16 = (axes4 == 17);
            			}
            			else {
HXLINE(  78)				_hx_tmp16 = true;
            			}
HXDLIN(  78)			if (_hx_tmp16) {
HXLINE(  78)				int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN(  78)				_this4->set_x(((( (Float)(_hx_tmp17) ) - _this4->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  78)			bool _hx_tmp18;
HXDLIN(  78)			if ((axes4 != 16)) {
HXLINE(  78)				_hx_tmp18 = (axes4 == 17);
            			}
            			else {
HXLINE(  78)				_hx_tmp18 = true;
            			}
HXDLIN(  78)			if (_hx_tmp18) {
HXLINE(  78)				int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN(  78)				_this4->set_y(((( (Float)(_hx_tmp19) ) - _this4->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  79)		this->barryIsBreakdancing->set_visible(false);
HXLINE(  80)		this->add(this->barryIsBreakdancing);
HXLINE(  83)		this->madeByCredits1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  84)		this->madeByCredits1->loadGraphic(HX_("assets/images/madeByCredits1.png",29,37,3e,1a),false,null(),null(),null(),null());
HXLINE(  85)		{
HXLINE(  85)			 ::flixel::math::FlxBasePoint this11 = this->madeByCredits1->scale;
HXDLIN(  85)			this11->set_x(((Float)0.72));
HXDLIN(  85)			this11->set_y(((Float)0.72));
            		}
HXLINE(  86)		{
HXLINE(  86)			 ::flixel::math::FlxBasePoint this12 = this->madeByCredits1->origin;
HXDLIN(  86)			Float x5 = (this->madeByCredits1->get_width() / ( (Float)(2) ));
HXDLIN(  86)			Float y6 = ((this->madeByCredits1->get_height() / ( (Float)(2) )) - ( (Float)(50) ));
HXDLIN(  86)			this12->set_x(x5);
HXDLIN(  86)			this12->set_y(y6);
            		}
HXLINE(  87)		{
HXLINE(  87)			 ::flixel::FlxSprite _this5 = this->madeByCredits1;
HXDLIN(  87)			int axes5 = 17;
HXDLIN(  87)			bool _hx_tmp20;
HXDLIN(  87)			if ((axes5 != 1)) {
HXLINE(  87)				_hx_tmp20 = (axes5 == 17);
            			}
            			else {
HXLINE(  87)				_hx_tmp20 = true;
            			}
HXDLIN(  87)			if (_hx_tmp20) {
HXLINE(  87)				int _hx_tmp21 = ::flixel::FlxG_obj::width;
HXDLIN(  87)				_this5->set_x(((( (Float)(_hx_tmp21) ) - _this5->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  87)			bool _hx_tmp22;
HXDLIN(  87)			if ((axes5 != 16)) {
HXLINE(  87)				_hx_tmp22 = (axes5 == 17);
            			}
            			else {
HXLINE(  87)				_hx_tmp22 = true;
            			}
HXDLIN(  87)			if (_hx_tmp22) {
HXLINE(  87)				int _hx_tmp23 = ::flixel::FlxG_obj::height;
HXDLIN(  87)				_this5->set_y(((( (Float)(_hx_tmp23) ) - _this5->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  88)		this->madeByCredits1->set_visible(false);
HXLINE(  89)		this->add(this->madeByCredits1);
HXLINE(  90)		this->madeByCredits2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  91)		this->madeByCredits2->loadGraphic(HX_("assets/images/madeByCredits2.png",aa,cb,a4,ad),false,null(),null(),null(),null());
HXLINE(  92)		{
HXLINE(  92)			 ::flixel::math::FlxBasePoint this13 = this->madeByCredits2->scale;
HXDLIN(  92)			this13->set_x(((Float)0.72));
HXDLIN(  92)			this13->set_y(((Float)0.72));
            		}
HXLINE(  93)		{
HXLINE(  93)			 ::flixel::math::FlxBasePoint this14 = this->madeByCredits2->origin;
HXDLIN(  93)			Float x6 = (this->madeByCredits2->get_width() / ( (Float)(2) ));
HXDLIN(  93)			Float y7 = ((this->madeByCredits2->get_height() / ( (Float)(2) )) - ( (Float)(50) ));
HXDLIN(  93)			this14->set_x(x6);
HXDLIN(  93)			this14->set_y(y7);
            		}
HXLINE(  94)		{
HXLINE(  94)			 ::flixel::FlxSprite _this6 = this->madeByCredits2;
HXDLIN(  94)			int axes6 = 17;
HXDLIN(  94)			bool _hx_tmp24;
HXDLIN(  94)			if ((axes6 != 1)) {
HXLINE(  94)				_hx_tmp24 = (axes6 == 17);
            			}
            			else {
HXLINE(  94)				_hx_tmp24 = true;
            			}
HXDLIN(  94)			if (_hx_tmp24) {
HXLINE(  94)				int _hx_tmp25 = ::flixel::FlxG_obj::width;
HXDLIN(  94)				_this6->set_x(((( (Float)(_hx_tmp25) ) - _this6->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  94)			bool _hx_tmp26;
HXDLIN(  94)			if ((axes6 != 16)) {
HXLINE(  94)				_hx_tmp26 = (axes6 == 17);
            			}
            			else {
HXLINE(  94)				_hx_tmp26 = true;
            			}
HXDLIN(  94)			if (_hx_tmp26) {
HXLINE(  94)				int _hx_tmp27 = ::flixel::FlxG_obj::height;
HXDLIN(  94)				_this6->set_y(((( (Float)(_hx_tmp27) ) - _this6->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  95)		this->madeByCredits2->set_visible(false);
HXLINE(  96)		this->add(this->madeByCredits2);
            	}


void OpeningState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_100_update)
HXDLIN( 100)		 ::OpeningState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 101)		this->super::update(elapsed);
HXLINE( 103)		if (this->playingOpening) {
HXLINE( 105)			if ((this->currentFrame < 43)) {
HXLINE( 107)				 ::OpeningState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)				_hx_tmp->frameTimer = (_hx_tmp->frameTimer + elapsed);
HXLINE( 108)				if ((this->frameTimer >= ((Float)0.055555555555555552))) {
HXLINE( 110)					 ::OpeningState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 110)					_hx_tmp1->frameTimer = (_hx_tmp1->frameTimer - ((Float)0.055555555555555552));
HXLINE( 111)					this->currentFrame++;
HXLINE( 112)					int frameNumber = (this->currentFrame + 1);
HXLINE( 113)					::String frameString;
HXDLIN( 113)					if ((frameNumber < 10)) {
HXLINE( 113)						frameString = (HX_("000",30,96,24,00) + frameNumber);
            					}
            					else {
HXLINE( 113)						if ((frameNumber < 100)) {
HXLINE( 113)							frameString = (HX_("00",00,2a,00,00) + frameNumber);
            						}
            						else {
HXLINE( 113)							frameString = (HX_("0",30,00,00,00) + frameNumber);
            						}
            					}
HXLINE( 114)					this->openingMovie->loadGraphic(((HX_("assets/images/openingMovie/opening",6c,4b,1d,06) + frameString) + HX_(".png",3b,2d,bd,1e)),false,null(),null(),null(),null());
            				}
            			}
            			else {
HXLINE( 117)				if (!(this->openingFinished)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::OpeningState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer _){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::OpeningState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween _){
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::OpeningState,_gthis) HXARGC(1)
            							void _hx_run( ::flixel::util::FlxTimer _){
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::OpeningState,_gthis) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer timer){
            									HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_134_update)
HXLINE( 135)									_gthis->showingAltNG = !(_gthis->showingAltNG);
HXLINE( 136)									_gthis->createdForNewgrounds->set_visible(!(_gthis->showingAltNG));
HXLINE( 137)									_gthis->createdForNewgrounds2->set_visible(_gthis->showingAltNG);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::OpeningState,_gthis) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer _){
            									HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::OpeningState,_gthis) HXARGC(1)
            									void _hx_run( ::flixel::util::FlxTimer timer){
            										HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::OpeningState,_gthis) HXARGC(1)
            										void _hx_run( ::flixel::util::FlxTimer timer){
            											HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_155_update)
HXLINE( 156)											_gthis->showingAltCredits = !(_gthis->showingAltCredits);
HXLINE( 157)											_gthis->madeByCredits1->set_visible(!(_gthis->showingAltCredits));
HXLINE( 158)											_gthis->madeByCredits2->set_visible(_gthis->showingAltCredits);
            										}
            										HX_END_LOCAL_FUNC1((void))

            										HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::OpeningState,_gthis) HXARGC(1)
            										void _hx_run( ::flixel::util::FlxTimer _){
            											HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_162_update)
HXLINE( 163)											_gthis->madeByCredits1->set_visible(false);
HXLINE( 164)											_gthis->madeByCredits2->set_visible(false);
HXLINE( 166)											if (::hx::IsNotNull( _gthis->creditsToggleTimer )) {
HXLINE( 167)												_gthis->creditsToggleTimer->cancel();
            											}
HXLINE( 169)											_gthis->SwitchScene(null());
            										}
            										HX_END_LOCAL_FUNC1((void))

            										HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_148_update)
HXLINE( 149)										_gthis->madeByCredits1->set_visible(true);
HXLINE( 150)										_gthis->madeByCredits2->set_visible(false);
HXLINE( 151)										_gthis->showingAltCredits = false;
HXLINE( 154)										_gthis->creditsToggleTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_1(_gthis)),0);
HXLINE( 161)										 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)5.35), ::Dynamic(new _hx_Closure_2(_gthis)),null());
            									}
            									HX_END_LOCAL_FUNC1((void))

            									HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_141_update)
HXLINE( 142)									_gthis->createdForNewgrounds->set_visible(false);
HXLINE( 143)									_gthis->createdForNewgrounds2->set_visible(false);
HXLINE( 145)									if (::hx::IsNotNull( _gthis->ngToggleTimer )) {
HXLINE( 146)										_gthis->ngToggleTimer->cancel();
            									}
HXLINE( 147)									 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_3(_gthis)),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_128_update)
HXLINE( 129)								_gthis->openingMovie->set_visible(false);
HXLINE( 130)								_gthis->createdForNewgrounds->set_visible(true);
HXLINE( 131)								_gthis->createdForNewgrounds2->set_visible(false);
HXLINE( 132)								_gthis->showingAltNG = false;
HXLINE( 133)								_gthis->ngToggleTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_0(_gthis)),0);
HXLINE( 140)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(5, ::Dynamic(new _hx_Closure_4(_gthis)),null());
            							}
            							HX_END_LOCAL_FUNC1((void))

            							HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_127_update)
HXLINE( 127)							 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.25), ::Dynamic(new _hx_Closure_5(_gthis)),null());
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_123_update)
HXLINE( 123)						::flixel::tweens::FlxTween_obj::tween(_gthis->openingMovie, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)1.5), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_6(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 119)					this->openingFinished = true;
HXLINE( 121)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_7(_gthis)),null());
            				}
            			}
HXLINE( 180)			return;
            		}
HXLINE( 183)		Float x = ( (Float)(::flixel::FlxG_obj::mouse->x) );
HXDLIN( 183)		Float y = ( (Float)(::flixel::FlxG_obj::mouse->y) );
HXDLIN( 183)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 183)		point->_inPool = false;
HXDLIN( 183)		 ::flixel::math::FlxBasePoint mousePoint = point;
HXLINE( 185)		if (this->clickToStartImage->overlapsPoint(mousePoint,null(),null())) {
HXLINE( 186)			bool _hx_tmp2;
HXDLIN( 186)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 186)				_hx_tmp2 = !(this->startClicked);
            			}
            			else {
HXLINE( 186)				_hx_tmp2 = false;
            			}
HXDLIN( 186)			if (_hx_tmp2) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::OpeningState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer _){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_194_update)
HXLINE( 194)						::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/titleLoop.ogg",07,42,5f,ab),((Float)0.8),true,null());
            					}
            					HX_END_LOCAL_FUNC0((void))

            					HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_190_update)
HXLINE( 191)					::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/titleIntro.ogg",4b,ca,b0,74),((Float)0.8),false,null());
HXLINE( 192)					::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_8());
HXLINE( 197)					_gthis->clickToStartImage->set_visible(false);
HXLINE( 198)					_gthis->openingMovie->set_visible(true);
HXLINE( 199)					_gthis->playingOpening = true;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 188)				this->startClicked = true;
HXLINE( 189)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_9(_gthis)),null());
            			}
HXLINE( 203)			 ::flixel::FlxSprite _hx_tmp3 = this->clickToStartImage;
HXLINE( 204)			int _hx_tmp4 = ::Std_obj::_hx_int((( (Float)(this->clickToStartImage->frameWidth) ) * (this->baseScale + ((Float)0.05))));
HXLINE( 203)			_hx_tmp3->setGraphicSize(_hx_tmp4,::Std_obj::_hx_int((( (Float)(this->clickToStartImage->frameHeight) ) * (this->baseScale + ((Float)0.05)))));
HXLINE( 208)			::lime::app::Application_obj::current->_hx___window->set_cursor(::lime::ui::MouseCursor_obj::POINTER_dyn());
HXLINE( 209)			this->clickToStartImage->updateHitbox();
HXLINE( 210)			{
HXLINE( 210)				 ::flixel::FlxSprite _this = this->clickToStartImage;
HXDLIN( 210)				int axes = 17;
HXDLIN( 210)				bool _hx_tmp5;
HXDLIN( 210)				if ((axes != 1)) {
HXLINE( 210)					_hx_tmp5 = (axes == 17);
            				}
            				else {
HXLINE( 210)					_hx_tmp5 = true;
            				}
HXDLIN( 210)				if (_hx_tmp5) {
HXLINE( 210)					int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN( 210)					_this->set_x(((( (Float)(_hx_tmp6) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 210)				bool _hx_tmp7;
HXDLIN( 210)				if ((axes != 16)) {
HXLINE( 210)					_hx_tmp7 = (axes == 17);
            				}
            				else {
HXLINE( 210)					_hx_tmp7 = true;
            				}
HXDLIN( 210)				if (_hx_tmp7) {
HXLINE( 210)					int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN( 210)					_this->set_y(((( (Float)(_hx_tmp8) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
            		}
            		else {
HXLINE( 214)			if (this->startClicked) {
HXLINE( 216)				 ::flixel::FlxSprite _hx_tmp9 = this->clickToStartImage;
HXDLIN( 216)				int _hx_tmp10 = ::Std_obj::_hx_int((( (Float)(this->clickToStartImage->frameWidth) ) * this->baseScale));
HXDLIN( 216)				_hx_tmp9->setGraphicSize(_hx_tmp10,::Std_obj::_hx_int((( (Float)(this->clickToStartImage->frameHeight) ) * this->baseScale)));
            			}
            			else {
HXLINE( 220)				 ::flixel::FlxSprite _hx_tmp11 = this->clickToStartImage;
HXDLIN( 220)				int _hx_tmp12 = ::Std_obj::_hx_int((( (Float)(this->clickToStartImage->frameWidth) ) * this->baseScale));
HXDLIN( 220)				_hx_tmp11->setGraphicSize(_hx_tmp12,::Std_obj::_hx_int((( (Float)(this->clickToStartImage->frameHeight) ) * this->baseScale)));
            			}
HXLINE( 223)			this->clickToStartImage->updateHitbox();
HXLINE( 224)			{
HXLINE( 224)				 ::flixel::FlxSprite _this1 = this->clickToStartImage;
HXDLIN( 224)				int axes1 = 17;
HXDLIN( 224)				bool _hx_tmp13;
HXDLIN( 224)				if ((axes1 != 1)) {
HXLINE( 224)					_hx_tmp13 = (axes1 == 17);
            				}
            				else {
HXLINE( 224)					_hx_tmp13 = true;
            				}
HXDLIN( 224)				if (_hx_tmp13) {
HXLINE( 224)					int _hx_tmp14 = ::flixel::FlxG_obj::width;
HXDLIN( 224)					_this1->set_x(((( (Float)(_hx_tmp14) ) - _this1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 224)				bool _hx_tmp15;
HXDLIN( 224)				if ((axes1 != 16)) {
HXLINE( 224)					_hx_tmp15 = (axes1 == 17);
            				}
            				else {
HXLINE( 224)					_hx_tmp15 = true;
            				}
HXDLIN( 224)				if (_hx_tmp15) {
HXLINE( 224)					int _hx_tmp16 = ::flixel::FlxG_obj::height;
HXDLIN( 224)					_this1->set_y(((( (Float)(_hx_tmp16) ) - _this1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 225)			this->clickToStartImage->set_alpha(((Float)0.5));
            		}
HXLINE( 229)		mousePoint->put();
            	}


void OpeningState_obj::SwitchScene( ::flixel::util::FlxTimer timer){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::TitleState _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_34142f3ba2c526b0_234_SwitchScene)
HXDLIN( 234)			return  ::TitleState_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_34142f3ba2c526b0_234_SwitchScene)
HXDLIN( 234)		 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 234)		 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 234)		bool _hx_tmp;
HXDLIN( 234)		if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXDLIN( 234)			_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            		}
            		else {
HXDLIN( 234)			_hx_tmp = true;
            		}
HXDLIN( 234)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_34142f3ba2c526b0_234_SwitchScene)
HXDLIN( 234)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXDLIN( 234)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXDLIN( 234)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXDLIN( 234)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpeningState_obj,SwitchScene,(void))


::hx::ObjectPtr< OpeningState_obj > OpeningState_obj::__new() {
	::hx::ObjectPtr< OpeningState_obj > __this = new OpeningState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< OpeningState_obj > OpeningState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	OpeningState_obj *__this = (OpeningState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OpeningState_obj), true, "OpeningState"));
	*(void **)__this = OpeningState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

OpeningState_obj::OpeningState_obj()
{
}

void OpeningState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OpeningState);
	HX_MARK_MEMBER_NAME(clickToStartImage,"clickToStartImage");
	HX_MARK_MEMBER_NAME(openingMovie,"openingMovie");
	HX_MARK_MEMBER_NAME(createdForNewgrounds,"createdForNewgrounds");
	HX_MARK_MEMBER_NAME(createdForNewgrounds2,"createdForNewgrounds2");
	HX_MARK_MEMBER_NAME(barryIsBreakdancing,"barryIsBreakdancing");
	HX_MARK_MEMBER_NAME(madeByCredits1,"madeByCredits1");
	HX_MARK_MEMBER_NAME(madeByCredits2,"madeByCredits2");
	HX_MARK_MEMBER_NAME(ngToggleTimer,"ngToggleTimer");
	HX_MARK_MEMBER_NAME(showingAltNG,"showingAltNG");
	HX_MARK_MEMBER_NAME(creditsToggleTimer,"creditsToggleTimer");
	HX_MARK_MEMBER_NAME(showingAltCredits,"showingAltCredits");
	HX_MARK_MEMBER_NAME(baseScale,"baseScale");
	HX_MARK_MEMBER_NAME(startClicked,"startClicked");
	HX_MARK_MEMBER_NAME(openingFinished,"openingFinished");
	HX_MARK_MEMBER_NAME(currentFrame,"currentFrame");
	HX_MARK_MEMBER_NAME(frameTimer,"frameTimer");
	HX_MARK_MEMBER_NAME(playingOpening,"playingOpening");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OpeningState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(clickToStartImage,"clickToStartImage");
	HX_VISIT_MEMBER_NAME(openingMovie,"openingMovie");
	HX_VISIT_MEMBER_NAME(createdForNewgrounds,"createdForNewgrounds");
	HX_VISIT_MEMBER_NAME(createdForNewgrounds2,"createdForNewgrounds2");
	HX_VISIT_MEMBER_NAME(barryIsBreakdancing,"barryIsBreakdancing");
	HX_VISIT_MEMBER_NAME(madeByCredits1,"madeByCredits1");
	HX_VISIT_MEMBER_NAME(madeByCredits2,"madeByCredits2");
	HX_VISIT_MEMBER_NAME(ngToggleTimer,"ngToggleTimer");
	HX_VISIT_MEMBER_NAME(showingAltNG,"showingAltNG");
	HX_VISIT_MEMBER_NAME(creditsToggleTimer,"creditsToggleTimer");
	HX_VISIT_MEMBER_NAME(showingAltCredits,"showingAltCredits");
	HX_VISIT_MEMBER_NAME(baseScale,"baseScale");
	HX_VISIT_MEMBER_NAME(startClicked,"startClicked");
	HX_VISIT_MEMBER_NAME(openingFinished,"openingFinished");
	HX_VISIT_MEMBER_NAME(currentFrame,"currentFrame");
	HX_VISIT_MEMBER_NAME(frameTimer,"frameTimer");
	HX_VISIT_MEMBER_NAME(playingOpening,"playingOpening");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OpeningState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"baseScale") ) { return ::hx::Val( baseScale ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTimer") ) { return ::hx::Val( frameTimer ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"SwitchScene") ) { return ::hx::Val( SwitchScene_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"openingMovie") ) { return ::hx::Val( openingMovie ); }
		if (HX_FIELD_EQ(inName,"showingAltNG") ) { return ::hx::Val( showingAltNG ); }
		if (HX_FIELD_EQ(inName,"startClicked") ) { return ::hx::Val( startClicked ); }
		if (HX_FIELD_EQ(inName,"currentFrame") ) { return ::hx::Val( currentFrame ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ngToggleTimer") ) { return ::hx::Val( ngToggleTimer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"madeByCredits1") ) { return ::hx::Val( madeByCredits1 ); }
		if (HX_FIELD_EQ(inName,"madeByCredits2") ) { return ::hx::Val( madeByCredits2 ); }
		if (HX_FIELD_EQ(inName,"playingOpening") ) { return ::hx::Val( playingOpening ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"openingFinished") ) { return ::hx::Val( openingFinished ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clickToStartImage") ) { return ::hx::Val( clickToStartImage ); }
		if (HX_FIELD_EQ(inName,"showingAltCredits") ) { return ::hx::Val( showingAltCredits ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"creditsToggleTimer") ) { return ::hx::Val( creditsToggleTimer ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"barryIsBreakdancing") ) { return ::hx::Val( barryIsBreakdancing ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createdForNewgrounds") ) { return ::hx::Val( createdForNewgrounds ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createdForNewgrounds2") ) { return ::hx::Val( createdForNewgrounds2 ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OpeningState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"baseScale") ) { baseScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTimer") ) { frameTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"openingMovie") ) { openingMovie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showingAltNG") ) { showingAltNG=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startClicked") ) { startClicked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrame") ) { currentFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ngToggleTimer") ) { ngToggleTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"madeByCredits1") ) { madeByCredits1=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"madeByCredits2") ) { madeByCredits2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playingOpening") ) { playingOpening=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"openingFinished") ) { openingFinished=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clickToStartImage") ) { clickToStartImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showingAltCredits") ) { showingAltCredits=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"creditsToggleTimer") ) { creditsToggleTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"barryIsBreakdancing") ) { barryIsBreakdancing=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createdForNewgrounds") ) { createdForNewgrounds=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createdForNewgrounds2") ) { createdForNewgrounds2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OpeningState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("clickToStartImage",5c,3d,bd,7b));
	outFields->push(HX_("openingMovie",38,1d,ab,86));
	outFields->push(HX_("createdForNewgrounds",0d,69,62,b2));
	outFields->push(HX_("createdForNewgrounds2",85,82,b9,63));
	outFields->push(HX_("barryIsBreakdancing",55,ed,e2,d6));
	outFields->push(HX_("madeByCredits1",03,be,30,d8));
	outFields->push(HX_("madeByCredits2",04,be,30,d8));
	outFields->push(HX_("ngToggleTimer",d8,17,ea,88));
	outFields->push(HX_("showingAltNG",5d,a3,4e,89));
	outFields->push(HX_("creditsToggleTimer",97,e3,00,4f));
	outFields->push(HX_("showingAltCredits",56,74,c1,28));
	outFields->push(HX_("baseScale",b9,78,b3,88));
	outFields->push(HX_("startClicked",65,5a,d8,6b));
	outFields->push(HX_("openingFinished",ea,6a,3c,53));
	outFields->push(HX_("currentFrame",34,5d,8f,4d));
	outFields->push(HX_("frameTimer",58,f4,5b,f3));
	outFields->push(HX_("playingOpening",8a,05,db,fe));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OpeningState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OpeningState_obj,clickToStartImage),HX_("clickToStartImage",5c,3d,bd,7b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OpeningState_obj,openingMovie),HX_("openingMovie",38,1d,ab,86)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OpeningState_obj,createdForNewgrounds),HX_("createdForNewgrounds",0d,69,62,b2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OpeningState_obj,createdForNewgrounds2),HX_("createdForNewgrounds2",85,82,b9,63)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OpeningState_obj,barryIsBreakdancing),HX_("barryIsBreakdancing",55,ed,e2,d6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OpeningState_obj,madeByCredits1),HX_("madeByCredits1",03,be,30,d8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OpeningState_obj,madeByCredits2),HX_("madeByCredits2",04,be,30,d8)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(OpeningState_obj,ngToggleTimer),HX_("ngToggleTimer",d8,17,ea,88)},
	{::hx::fsBool,(int)offsetof(OpeningState_obj,showingAltNG),HX_("showingAltNG",5d,a3,4e,89)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(OpeningState_obj,creditsToggleTimer),HX_("creditsToggleTimer",97,e3,00,4f)},
	{::hx::fsBool,(int)offsetof(OpeningState_obj,showingAltCredits),HX_("showingAltCredits",56,74,c1,28)},
	{::hx::fsFloat,(int)offsetof(OpeningState_obj,baseScale),HX_("baseScale",b9,78,b3,88)},
	{::hx::fsBool,(int)offsetof(OpeningState_obj,startClicked),HX_("startClicked",65,5a,d8,6b)},
	{::hx::fsBool,(int)offsetof(OpeningState_obj,openingFinished),HX_("openingFinished",ea,6a,3c,53)},
	{::hx::fsInt,(int)offsetof(OpeningState_obj,currentFrame),HX_("currentFrame",34,5d,8f,4d)},
	{::hx::fsFloat,(int)offsetof(OpeningState_obj,frameTimer),HX_("frameTimer",58,f4,5b,f3)},
	{::hx::fsBool,(int)offsetof(OpeningState_obj,playingOpening),HX_("playingOpening",8a,05,db,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OpeningState_obj_sStaticStorageInfo = 0;
#endif

static ::String OpeningState_obj_sMemberFields[] = {
	HX_("clickToStartImage",5c,3d,bd,7b),
	HX_("openingMovie",38,1d,ab,86),
	HX_("createdForNewgrounds",0d,69,62,b2),
	HX_("createdForNewgrounds2",85,82,b9,63),
	HX_("barryIsBreakdancing",55,ed,e2,d6),
	HX_("madeByCredits1",03,be,30,d8),
	HX_("madeByCredits2",04,be,30,d8),
	HX_("ngToggleTimer",d8,17,ea,88),
	HX_("showingAltNG",5d,a3,4e,89),
	HX_("creditsToggleTimer",97,e3,00,4f),
	HX_("showingAltCredits",56,74,c1,28),
	HX_("baseScale",b9,78,b3,88),
	HX_("startClicked",65,5a,d8,6b),
	HX_("openingFinished",ea,6a,3c,53),
	HX_("currentFrame",34,5d,8f,4d),
	HX_("frameTimer",58,f4,5b,f3),
	HX_("playingOpening",8a,05,db,fe),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("SwitchScene",98,02,84,50),
	::String(null()) };

::hx::Class OpeningState_obj::__mClass;

void OpeningState_obj::__register()
{
	OpeningState_obj _hx_dummy;
	OpeningState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("OpeningState",b9,0f,63,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OpeningState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OpeningState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpeningState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpeningState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


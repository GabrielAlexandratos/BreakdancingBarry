// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a55214e0452daa02_8_new,"TitleState","new",0x3b23deeb,"TitleState.new","TitleState.hx",8,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_14_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",14,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_40_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",40,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_45_SwitchScene,"TitleState","SwitchScene",0x98261423,"TitleState.SwitchScene","TitleState.hx",45,0xd132a6e5)

void TitleState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_8_new)
HXDLIN(   8)		super::__construct();
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x22c6bd01) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x22c6bd01;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void TitleState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_14_create)
HXLINE(  16)		this->super::create();
HXLINE(  18)		this->BackgroundColor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  19)		this->BackgroundColor->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-11842741,null(),null());
HXLINE(  20)		this->add(this->BackgroundColor);
HXLINE(  22)		this->Background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  23)		this->Background->loadGraphic(HX_("assets/images/backgrounds/titlebackground.png",ec,80,60,04),false,null(),null(),null(),null());
HXLINE(  24)		{
HXLINE(  24)			 ::flixel::math::FlxBasePoint this1 = this->Background->origin;
HXDLIN(  24)			Float x = (this->Background->get_width() / ( (Float)(2) ));
HXDLIN(  24)			Float y = ((this->Background->get_height() / ( (Float)(2) )) - ( (Float)(190) ));
HXDLIN(  24)			this1->set_x(x);
HXDLIN(  24)			this1->set_y(y);
            		}
HXLINE(  25)		{
HXLINE(  25)			 ::flixel::math::FlxBasePoint this2 = this->Background->scale;
HXDLIN(  25)			this2->set_x(((Float)0.72));
HXDLIN(  25)			this2->set_y(((Float)0.72));
            		}
HXLINE(  27)		{
HXLINE(  27)			 ::flixel::FlxSprite _this = this->Background;
HXDLIN(  27)			int axes = 17;
HXDLIN(  27)			bool _hx_tmp;
HXDLIN(  27)			if ((axes != 1)) {
HXLINE(  27)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  27)				_hx_tmp = true;
            			}
HXDLIN(  27)			if (_hx_tmp) {
HXLINE(  27)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  27)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  27)			bool _hx_tmp2;
HXDLIN(  27)			if ((axes != 16)) {
HXLINE(  27)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  27)				_hx_tmp2 = true;
            			}
HXDLIN(  27)			if (_hx_tmp2) {
HXLINE(  27)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  27)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  28)		this->add(this->Background);
HXLINE(  30)		this->TitleLogo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  31)		this->TitleLogo->loadGraphic(HX_("assets/images/BarryLogo.png",f5,cd,75,10),false,null(),null(),null(),null());
HXLINE(  32)		{
HXLINE(  32)			 ::flixel::math::FlxBasePoint this3 = this->TitleLogo->origin;
HXDLIN(  32)			Float x1 = ((this->TitleLogo->get_width() / ( (Float)(2) )) - ( (Float)(30) ));
HXDLIN(  32)			Float y1 = ((this->TitleLogo->get_height() / ( (Float)(2) )) - ( (Float)(270) ));
HXDLIN(  32)			this3->set_x(x1);
HXDLIN(  32)			this3->set_y(y1);
            		}
HXLINE(  33)		{
HXLINE(  33)			 ::flixel::math::FlxBasePoint this4 = this->TitleLogo->scale;
HXDLIN(  33)			this4->set_x(((Float)0.3));
HXDLIN(  33)			this4->set_y(((Float)0.3));
            		}
HXLINE(  34)		{
HXLINE(  34)			 ::flixel::FlxSprite _this1 = this->TitleLogo;
HXDLIN(  34)			int axes1 = 17;
HXDLIN(  34)			bool _hx_tmp4;
HXDLIN(  34)			if ((axes1 != 1)) {
HXLINE(  34)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE(  34)				_hx_tmp4 = true;
            			}
HXDLIN(  34)			if (_hx_tmp4) {
HXLINE(  34)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(  34)				_this1->set_x(((( (Float)(_hx_tmp5) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  34)			bool _hx_tmp6;
HXDLIN(  34)			if ((axes1 != 16)) {
HXLINE(  34)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(  34)				_hx_tmp6 = true;
            			}
HXDLIN(  34)			if (_hx_tmp6) {
HXLINE(  34)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(  34)				_this1->set_y(((( (Float)(_hx_tmp7) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  35)		this->add(this->TitleLogo);
            	}


void TitleState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_40_update)
HXDLIN(  40)		this->super::update(elapsed);
            	}


void TitleState_obj::SwitchScene( ::flixel::util::FlxTimer timer){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::MainMenuState _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_45_SwitchScene)
HXDLIN(  45)			return  ::MainMenuState_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_45_SwitchScene)
HXDLIN(  45)		 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  45)		 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  45)		bool _hx_tmp;
HXDLIN(  45)		if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXDLIN(  45)			_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            		}
            		else {
HXDLIN(  45)			_hx_tmp = true;
            		}
HXDLIN(  45)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_a55214e0452daa02_45_SwitchScene)
HXDLIN(  45)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXDLIN(  45)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXDLIN(  45)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXDLIN(  45)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleState_obj,SwitchScene,(void))


::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new() {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(TitleLogo,"TitleLogo");
	HX_MARK_MEMBER_NAME(Background,"Background");
	HX_MARK_MEMBER_NAME(BackgroundColor,"BackgroundColor");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(TitleLogo,"TitleLogo");
	HX_VISIT_MEMBER_NAME(Background,"Background");
	HX_VISIT_MEMBER_NAME(BackgroundColor,"BackgroundColor");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"TitleLogo") ) { return ::hx::Val( TitleLogo ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"Background") ) { return ::hx::Val( Background ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"SwitchScene") ) { return ::hx::Val( SwitchScene_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BackgroundColor") ) { return ::hx::Val( BackgroundColor ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"TitleLogo") ) { TitleLogo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"Background") ) { Background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BackgroundColor") ) { BackgroundColor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("TitleLogo",03,6d,35,0d));
	outFields->push(HX_("Background",0e,98,ce,1c));
	outFields->push(HX_("BackgroundColor",75,56,d3,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,TitleLogo),HX_("TitleLogo",03,6d,35,0d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,Background),HX_("Background",0e,98,ce,1c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,BackgroundColor),HX_("BackgroundColor",75,56,d3,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TitleState_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("TitleLogo",03,6d,35,0d),
	HX_("Background",0e,98,ce,1c),
	HX_("BackgroundColor",75,56,d3,6d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("SwitchScene",98,02,84,50),
	::String(null()) };

::hx::Class TitleState_obj::__mClass;

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TitleState",79,8d,a1,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


// Generated by Haxe 4.3.6
#ifndef INCLUDED_OpeningState
#define INCLUDED_OpeningState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(OpeningState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES OpeningState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef OpeningState_obj OBJ_;
		OpeningState_obj();

	public:
		enum { _hx_ClassId = 0x13d93141 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="OpeningState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"OpeningState"); }
		static ::hx::ObjectPtr< OpeningState_obj > __new();
		static ::hx::ObjectPtr< OpeningState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~OpeningState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("OpeningState",b9,0f,63,c6); }

		 ::flixel::FlxSprite clickToStartImage;
		 ::flixel::FlxSprite openingMovie;
		 ::flixel::FlxSprite createdForNewgrounds;
		 ::flixel::FlxSprite createdForNewgrounds2;
		 ::flixel::FlxSprite barryIsBreakdancing;
		 ::flixel::FlxSprite madeByCredits1;
		 ::flixel::FlxSprite madeByCredits2;
		 ::flixel::util::FlxTimer ngToggleTimer;
		bool showingAltNG;
		 ::flixel::util::FlxTimer creditsToggleTimer;
		bool showingAltCredits;
		Float baseScale;
		bool startClicked;
		bool openingFinished;
		int currentFrame;
		Float frameTimer;
		bool playingOpening;
		void create();

		void update(Float elapsed);

		void SwitchScene( ::flixel::util::FlxTimer timer);
		::Dynamic SwitchScene_dyn();

};


#endif /* INCLUDED_OpeningState */ 
